from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.band_ctrl_entity import BandCtrlEntity
    from ..models.dhcp_l2_relay_entity import DhcpL2RelayEntity
    from ..models.lan_profile_entity_tag_bridge_vlan_map import LanProfileEntityTagBridgeVlanMap
    from ..models.lan_profile_entity_untag_bridge_vlan_map import LanProfileEntityUntagBridgeVlanMap
    from ..models.spanning_tree_entity import SpanningTreeEntity
    from ..models.storm_ctrl_entity import StormCtrlEntity


T = TypeVar("T", bound="LanProfileEntity")


@_attrs_define
class LanProfileEntity:
    """
    Attributes:
        name (str): lan profile name
        poe (int): PoE info, 0 means off and 1 means off
        dot1x (int): dot1x, 0 means force unauthorized, 1 means force authorized and 2 means auto
        port_isolation_enable (bool): port-isolation enable status
        lldp_med_enable (bool): lldpMed enable status
        band_width_ctrl_type (int): 0 means off, 1 means rate limit and 2 means storming control
        spanning_tree_enable (bool): spanningTree enable status
        loopback_detect_enable (bool): loopbackDetect enable status
        id (Union[Unset, str]): lan profile id
        site (Union[Unset, str]): Site ID
        flag (Union[Unset, int]): 0：default(all,disable,lan)，1：native(generated by create lan network)，2：customize(user
            create)
        native_network_id (Union[Unset, str]): native network id
        native_bridge_vlan (Union[Unset, int]): native bridge VLAN
        tag_network_ids (Union[Unset, List[str]]): tag network ids
        tag_bridge_vlan_map (Union[Unset, LanProfileEntityTagBridgeVlanMap]): tag bridge vlan map
        untag_network_ids (Union[Unset, List[str]]): untag network ids
        untag_bridge_vlan_map (Union[Unset, LanProfileEntityUntagBridgeVlanMap]): untag bridge VLAN map
        voice_network_id (Union[Unset, str]): voice Network Id
        voice_bridge_vlan (Union[Unset, int]): voice bridge VLAN
        topo_notify_enable (Union[Unset, bool]): topoNotify enable status
        storm_ctrl (Union[Unset, StormCtrlEntity]): stormCtrl
        band_ctrl (Union[Unset, BandCtrlEntity]): bandCtrl
        spanning_tree_setting (Union[Unset, SpanningTreeEntity]): spanningTreeSetting
        eee_enable (Union[Unset, bool]): EEE enable status
        flow_control_enable (Union[Unset, bool]): flowControl enable status
        loopback_detect_vlan_based_enable (Union[Unset, bool]): loopbackDetectVlanBased enable status
        dhcp_l2_relay_settings (Union[Unset, DhcpL2RelayEntity]): dhcpL2RelaySettings
        type (Union[Unset, int]): 0 means lan profile-ALL, 1 means LAN profile-Disable, 2 means LAN Profile except ALL
            and Disable
    """

    name: str
    poe: int
    dot1x: int
    port_isolation_enable: bool
    lldp_med_enable: bool
    band_width_ctrl_type: int
    spanning_tree_enable: bool
    loopback_detect_enable: bool
    id: Union[Unset, str] = UNSET
    site: Union[Unset, str] = UNSET
    flag: Union[Unset, int] = UNSET
    native_network_id: Union[Unset, str] = UNSET
    native_bridge_vlan: Union[Unset, int] = UNSET
    tag_network_ids: Union[Unset, List[str]] = UNSET
    tag_bridge_vlan_map: Union[Unset, "LanProfileEntityTagBridgeVlanMap"] = UNSET
    untag_network_ids: Union[Unset, List[str]] = UNSET
    untag_bridge_vlan_map: Union[Unset, "LanProfileEntityUntagBridgeVlanMap"] = UNSET
    voice_network_id: Union[Unset, str] = UNSET
    voice_bridge_vlan: Union[Unset, int] = UNSET
    topo_notify_enable: Union[Unset, bool] = UNSET
    storm_ctrl: Union[Unset, "StormCtrlEntity"] = UNSET
    band_ctrl: Union[Unset, "BandCtrlEntity"] = UNSET
    spanning_tree_setting: Union[Unset, "SpanningTreeEntity"] = UNSET
    eee_enable: Union[Unset, bool] = UNSET
    flow_control_enable: Union[Unset, bool] = UNSET
    loopback_detect_vlan_based_enable: Union[Unset, bool] = UNSET
    dhcp_l2_relay_settings: Union[Unset, "DhcpL2RelayEntity"] = UNSET
    type: Union[Unset, int] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        name = self.name
        poe = self.poe
        dot1x = self.dot1x
        port_isolation_enable = self.port_isolation_enable
        lldp_med_enable = self.lldp_med_enable
        band_width_ctrl_type = self.band_width_ctrl_type
        spanning_tree_enable = self.spanning_tree_enable
        loopback_detect_enable = self.loopback_detect_enable
        id = self.id
        site = self.site
        flag = self.flag
        native_network_id = self.native_network_id
        native_bridge_vlan = self.native_bridge_vlan
        tag_network_ids: Union[Unset, List[str]] = UNSET
        if not isinstance(self.tag_network_ids, Unset):
            tag_network_ids = self.tag_network_ids

        tag_bridge_vlan_map: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.tag_bridge_vlan_map, Unset):
            tag_bridge_vlan_map = self.tag_bridge_vlan_map.to_dict()

        untag_network_ids: Union[Unset, List[str]] = UNSET
        if not isinstance(self.untag_network_ids, Unset):
            untag_network_ids = self.untag_network_ids

        untag_bridge_vlan_map: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.untag_bridge_vlan_map, Unset):
            untag_bridge_vlan_map = self.untag_bridge_vlan_map.to_dict()

        voice_network_id = self.voice_network_id
        voice_bridge_vlan = self.voice_bridge_vlan
        topo_notify_enable = self.topo_notify_enable
        storm_ctrl: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.storm_ctrl, Unset):
            storm_ctrl = self.storm_ctrl.to_dict()

        band_ctrl: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.band_ctrl, Unset):
            band_ctrl = self.band_ctrl.to_dict()

        spanning_tree_setting: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.spanning_tree_setting, Unset):
            spanning_tree_setting = self.spanning_tree_setting.to_dict()

        eee_enable = self.eee_enable
        flow_control_enable = self.flow_control_enable
        loopback_detect_vlan_based_enable = self.loopback_detect_vlan_based_enable
        dhcp_l2_relay_settings: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.dhcp_l2_relay_settings, Unset):
            dhcp_l2_relay_settings = self.dhcp_l2_relay_settings.to_dict()

        type = self.type

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "name": name,
                "poe": poe,
                "dot1x": dot1x,
                "portIsolationEnable": port_isolation_enable,
                "lldpMedEnable": lldp_med_enable,
                "bandWidthCtrlType": band_width_ctrl_type,
                "spanningTreeEnable": spanning_tree_enable,
                "loopbackDetectEnable": loopback_detect_enable,
            }
        )
        if id is not UNSET:
            field_dict["id"] = id
        if site is not UNSET:
            field_dict["site"] = site
        if flag is not UNSET:
            field_dict["flag"] = flag
        if native_network_id is not UNSET:
            field_dict["nativeNetworkId"] = native_network_id
        if native_bridge_vlan is not UNSET:
            field_dict["nativeBridgeVlan"] = native_bridge_vlan
        if tag_network_ids is not UNSET:
            field_dict["tagNetworkIds"] = tag_network_ids
        if tag_bridge_vlan_map is not UNSET:
            field_dict["tagBridgeVlanMap"] = tag_bridge_vlan_map
        if untag_network_ids is not UNSET:
            field_dict["untagNetworkIds"] = untag_network_ids
        if untag_bridge_vlan_map is not UNSET:
            field_dict["untagBridgeVlanMap"] = untag_bridge_vlan_map
        if voice_network_id is not UNSET:
            field_dict["voiceNetworkId"] = voice_network_id
        if voice_bridge_vlan is not UNSET:
            field_dict["voiceBridgeVlan"] = voice_bridge_vlan
        if topo_notify_enable is not UNSET:
            field_dict["topoNotifyEnable"] = topo_notify_enable
        if storm_ctrl is not UNSET:
            field_dict["stormCtrl"] = storm_ctrl
        if band_ctrl is not UNSET:
            field_dict["bandCtrl"] = band_ctrl
        if spanning_tree_setting is not UNSET:
            field_dict["spanningTreeSetting"] = spanning_tree_setting
        if eee_enable is not UNSET:
            field_dict["eeeEnable"] = eee_enable
        if flow_control_enable is not UNSET:
            field_dict["flowControlEnable"] = flow_control_enable
        if loopback_detect_vlan_based_enable is not UNSET:
            field_dict["loopbackDetectVlanBasedEnable"] = loopback_detect_vlan_based_enable
        if dhcp_l2_relay_settings is not UNSET:
            field_dict["dhcpL2RelaySettings"] = dhcp_l2_relay_settings
        if type is not UNSET:
            field_dict["type"] = type

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.band_ctrl_entity import BandCtrlEntity
        from ..models.dhcp_l2_relay_entity import DhcpL2RelayEntity
        from ..models.lan_profile_entity_tag_bridge_vlan_map import LanProfileEntityTagBridgeVlanMap
        from ..models.lan_profile_entity_untag_bridge_vlan_map import LanProfileEntityUntagBridgeVlanMap
        from ..models.spanning_tree_entity import SpanningTreeEntity
        from ..models.storm_ctrl_entity import StormCtrlEntity

        d = src_dict.copy()
        name = d.pop("name")

        poe = d.pop("poe")

        dot1x = d.pop("dot1x")

        port_isolation_enable = d.pop("portIsolationEnable")

        lldp_med_enable = d.pop("lldpMedEnable")

        band_width_ctrl_type = d.pop("bandWidthCtrlType")

        spanning_tree_enable = d.pop("spanningTreeEnable")

        loopback_detect_enable = d.pop("loopbackDetectEnable")

        id = d.pop("id", UNSET)

        site = d.pop("site", UNSET)

        flag = d.pop("flag", UNSET)

        native_network_id = d.pop("nativeNetworkId", UNSET)

        native_bridge_vlan = d.pop("nativeBridgeVlan", UNSET)

        tag_network_ids = cast(List[str], d.pop("tagNetworkIds", UNSET))

        _tag_bridge_vlan_map = d.pop("tagBridgeVlanMap", UNSET)
        tag_bridge_vlan_map: Union[Unset, LanProfileEntityTagBridgeVlanMap]
        if isinstance(_tag_bridge_vlan_map, Unset):
            tag_bridge_vlan_map = UNSET
        else:
            tag_bridge_vlan_map = LanProfileEntityTagBridgeVlanMap.from_dict(_tag_bridge_vlan_map)

        untag_network_ids = cast(List[str], d.pop("untagNetworkIds", UNSET))

        _untag_bridge_vlan_map = d.pop("untagBridgeVlanMap", UNSET)
        untag_bridge_vlan_map: Union[Unset, LanProfileEntityUntagBridgeVlanMap]
        if isinstance(_untag_bridge_vlan_map, Unset):
            untag_bridge_vlan_map = UNSET
        else:
            untag_bridge_vlan_map = LanProfileEntityUntagBridgeVlanMap.from_dict(_untag_bridge_vlan_map)

        voice_network_id = d.pop("voiceNetworkId", UNSET)

        voice_bridge_vlan = d.pop("voiceBridgeVlan", UNSET)

        topo_notify_enable = d.pop("topoNotifyEnable", UNSET)

        _storm_ctrl = d.pop("stormCtrl", UNSET)
        storm_ctrl: Union[Unset, StormCtrlEntity]
        if isinstance(_storm_ctrl, Unset):
            storm_ctrl = UNSET
        else:
            storm_ctrl = StormCtrlEntity.from_dict(_storm_ctrl)

        _band_ctrl = d.pop("bandCtrl", UNSET)
        band_ctrl: Union[Unset, BandCtrlEntity]
        if isinstance(_band_ctrl, Unset):
            band_ctrl = UNSET
        else:
            band_ctrl = BandCtrlEntity.from_dict(_band_ctrl)

        _spanning_tree_setting = d.pop("spanningTreeSetting", UNSET)
        spanning_tree_setting: Union[Unset, SpanningTreeEntity]
        if isinstance(_spanning_tree_setting, Unset):
            spanning_tree_setting = UNSET
        else:
            spanning_tree_setting = SpanningTreeEntity.from_dict(_spanning_tree_setting)

        eee_enable = d.pop("eeeEnable", UNSET)

        flow_control_enable = d.pop("flowControlEnable", UNSET)

        loopback_detect_vlan_based_enable = d.pop("loopbackDetectVlanBasedEnable", UNSET)

        _dhcp_l2_relay_settings = d.pop("dhcpL2RelaySettings", UNSET)
        dhcp_l2_relay_settings: Union[Unset, DhcpL2RelayEntity]
        if isinstance(_dhcp_l2_relay_settings, Unset):
            dhcp_l2_relay_settings = UNSET
        else:
            dhcp_l2_relay_settings = DhcpL2RelayEntity.from_dict(_dhcp_l2_relay_settings)

        type = d.pop("type", UNSET)

        lan_profile_entity = cls(
            name=name,
            poe=poe,
            dot1x=dot1x,
            port_isolation_enable=port_isolation_enable,
            lldp_med_enable=lldp_med_enable,
            band_width_ctrl_type=band_width_ctrl_type,
            spanning_tree_enable=spanning_tree_enable,
            loopback_detect_enable=loopback_detect_enable,
            id=id,
            site=site,
            flag=flag,
            native_network_id=native_network_id,
            native_bridge_vlan=native_bridge_vlan,
            tag_network_ids=tag_network_ids,
            tag_bridge_vlan_map=tag_bridge_vlan_map,
            untag_network_ids=untag_network_ids,
            untag_bridge_vlan_map=untag_bridge_vlan_map,
            voice_network_id=voice_network_id,
            voice_bridge_vlan=voice_bridge_vlan,
            topo_notify_enable=topo_notify_enable,
            storm_ctrl=storm_ctrl,
            band_ctrl=band_ctrl,
            spanning_tree_setting=spanning_tree_setting,
            eee_enable=eee_enable,
            flow_control_enable=flow_control_enable,
            loopback_detect_vlan_based_enable=loopback_detect_vlan_based_enable,
            dhcp_l2_relay_settings=dhcp_l2_relay_settings,
            type=type,
        )

        lan_profile_entity.additional_properties = d
        return lan_profile_entity

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
